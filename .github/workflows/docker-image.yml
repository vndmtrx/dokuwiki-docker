name: Docker Build and Security Pipeline

on:
  release:
    types: [published]

jobs:
  build:
    name: üèóÔ∏è Build and Push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            vndmtrx/dokuwiki:latest
            vndmtrx/dokuwiki:${{ github.ref_name }}

  scan:
    name: üîí Security Scan
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Run Trivy Scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: vndmtrx/dokuwiki:latest
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Generate Security Report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: vndmtrx/dokuwiki:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Security Report
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  notify:
    name: üì¢ Status Notification
    needs: [build, scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check Pipeline Status
        run: |
          if [[ "${{ needs.build.result }}" == "success" && "${{ needs.scan.result }}" == "success" ]]; then
            echo "‚úÖ Pipeline completed successfully"
          else
            echo "‚ùå Pipeline failed"
            echo "Build Status: ${{ needs.build.result }}"
            echo "Scan Status: ${{ needs.scan.result }}"
            exit 1
          fi